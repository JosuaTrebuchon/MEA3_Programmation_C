/*
 * question1.h
 *
 *  Created on: 13 nov. 2020
 *      Author: mea
 */

#ifndef EXPLOITATION_H_
#define EXPLOITATION_H_
#include "database.h"
#include "math_stat.h"
#include <stdio.h>

/**
 * Calule la moyenne des donnÃ©es mÃ©tÃ©orologiques pour une annÃ©e et une sÃ©rie d'une rÃ©gion
 *
 * @param database Pointeur vers la bdd
 * @param r_index Incide de la rÃ©gion concernÃ©e dans le tableau des rÃ©gions de la bdd
 * @param annee Annee concernÃ©e (annee < NB_YEARS)
 * @param serie SÃ©rie de donnÃ©es concernÃ©e
 */
void average_region(database_t* database, int r_index, int annee, int serie){
	// On crÃ©er un tableau qui va contenir chaque valeur par annÃ©e par departement
	float t[database->regions[r_index].nb_departments];
	int dep_i;
	unsigned int size = 0;

	for(dep_i = 0; dep_i < database->nb_departments; dep_i++){
		// Si le dep appartient Ã  la rÃ©gion et que les valeurs ne sont pas nulles
		if(database->departments[dep_i].region_index == r_index && database->departments[dep_i].values[serie][annee] != 0){
			t[size] = database->departments[dep_i].values[serie][annee];
			size++;
		}
	}
	// On calcule la moyenne et on la range dans la bdd
	database->regions[r_index].values[serie][annee] = stat_avg(t, size);
}


void tab_avg_region(database_t* database, int r_index){
	unsigned int nb_dep = database->regions[r_index].nb_departments;
	printf("Region : %s (%d départements)\n\n", database->regions[r_index].name, nb_dep);

	printf("Temperatures(C)\t Rain(mm)\t Icing days(#)\t Wind(km/h)\n");
	printf("---------------------------------------------------------\n");
	// pour chaque années
	for(int i = 0; i < NB_YEARS; i++){
		// pour chaque série
		for(int j = 0; j < NB_VARIABLES; j++){
			printf("%.2f           ", database->regions[r_index].values[j][i]);
		}
		printf("\n");
	}
}

/**
 * Remplissage des tableaux de donnÃ©es des moyennes de toutes les rÃ©gions dans la bdd
 *
 * @param database Bdd concernÃ©e
 */
void average_by_region(database_t* database){
	int r_index, annee, serie;

	// For every region in the database
	for(r_index = 0; r_index < (database->nb_regions); r_index++){
		// Pour chaque annee
		for(annee = 0; annee < NB_YEARS; annee++){
			// Pour chaque sÃ©rie
			for(serie = 0; serie < NB_VARIABLES; serie++){
				// Calcul de la moyenne par region annee et serie
				average_region(database, r_index, annee, serie);
			}
		}
	}
}

/**
 * Affiche la variance entre les données météorologique des régions
 *
 * @param datatbase Base de donnée contenant les informations
 * @param serie Série que l'on veut traiter
 */
void variance_by_region(database_t* database, unsigned int serie){
	for(int i = 0; i < database->nb_regions; i++){
		printf("%s : %f\n", database->regions[i].name, stat_var(database->regions[i].values[serie], NB_YEARS));
	}
}

/**
 * Affiche la covariance entre deux régions
 *
 * @param datatbase Base de donnée contenant les informations
 * @param r1 Indice première région
 * @param r2 Indice deuxième région
 * @param serie Série que l'on veut traiter
 */
void cov_btw_regions(database_t* database, unsigned int r1, unsigned int r2, int serie){
	float cov = stat_covar(database->regions[r1].values[serie], database->regions[r2].values[serie], NB_YEARS);
	printf("Covariance entre %s et %s : %f\n", database->regions[r1].name, database->regions[r2].name, cov);
}

/**
 * Affiche le coeff de Pearson entre deux régions
 *
 * @param datatbase Base de donnée contenant les informations
 * @param r1 Indice première région
 * @param r2 Indice deuxième région
 * @param serie Série que l'on veut traiter
 */
void pearson_btw_regions(database_t* database, unsigned int r1, unsigned int r2, int serie){
	float pearson = stat_pearson(database->regions[r1].values[serie], database->regions[r2].values[serie], NB_YEARS);
	printf("Coeff de pearson entre %s et %s : %f\n", database->regions[r1].name, database->regions[r2].name, pearson);
}

/**
 * Affiche des prévisions pour une année, un departement et une série donnés
 *
 * @param datatbase Base de donnée contenant les informations
 * @param dep Indice du departement
 * @param serie Série que l'on veut traiter
 * @param annee Annee à prévoir
 */
void regression_lineaire(database_t* database, unsigned int dep, int serie, float annee){
	int dep_i = find_department(database, dep);
	float rl;
	float years[NB_YEARS];
	for(int i = 0; i < NB_YEARS; i++){
		years[i] = 1970 + i;
	}

	printf("\nPour %s :\n", database->departments[dep_i].name);
	printf("Régression linéaire");
	switch(serie){
	case 0:
		printf(" de la température (°C) : ");
		break;
	case 1:
		printf(" de la pluviométrie (mm) : ");
		break;
	case 2:
		printf(" du gel (nombre de jours annuel) : ");
		break;
	default:
		printf(" du vent (km/h) : ");
		break;
	}
	printf("\n");
	rl = stat_lin_reg(years,database->departments[dep_i].values[serie], NB_YEARS, annee);

	printf("Prévisions pour %f : E(Y) = %f\n", annee, rl);

}

#endif /* EXPLOITATION_H_ */
